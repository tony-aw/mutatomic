% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/safe2mutate.R
\name{stopifnot_ma_safe2mutate}
\alias{stopifnot_ma_safe2mutate}
\title{Check If an Atomic Object is Safe to Mutate}
\usage{
stopifnot_ma_safe2mutate(sym, envir, .abortcall)
}
\arguments{
\item{sym}{the symbol of the object; i.e. \code{substitute(x)}.}

\item{envir}{the environment where the object resides; i.e. \code{parent.frame(n = 1)}.}

\item{.abortcall}{environment where the error message is passed to.}
}
\value{
Nothing. Only gives an error if the object is not safe to mutate.
}
\description{
Arguably the most important function of 'mutatomic' for package development
is the \code{stopifnot_ma_safe2mutate()} function,
which checks if an atomic object is actually safe to mutate. \cr
Package authors who wish to use 'mutatomic' for pass-by-reference semantics
ought to check if an atomic object is safe to mutate using the \code{stopifnot_ma_safe2mutate()} function; \cr
otherwise things might break in 'R'. \cr
}
\examples{

x <- 1:16

testfun <- function(x) {
  stopifnot_ma_safe2mutate(substitute(x), parent.frame(n = 1), sys.call())
}

if(requireNamespace("tinytest")) {
  tinytest::expect_error(
    testfun(x),
    pattern = "not a 'mutatomic' object"
  )
}

mylist <- list(
  a = mutatomic(1:10)
)

if(requireNamespace("tinytest")) {
  tinytest::expect_error(
    testfun(mylist$a),
    pattern = "only objects that exist as variables can be modified by reference"
  )
}

lockBinding("x", environment())

if(requireNamespace("tinytest")) {
  tinytest::expect_error(
    testfun(x),
    pattern = "cannot change value of locked binding for"
  )
}


rm(list = "x")

}
