// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_set_all_atomic
void rcpp_set_all_atomic(SEXP x, const SEXP rp);
RcppExport SEXP _mutatomic_rcpp_set_all_atomic(SEXP xSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_all_atomic(x, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_vind_32_atomic
void rcpp_set_vind_32_atomic(SEXP x, const SEXP ind, const SEXP rp);
RcppExport SEXP _mutatomic_rcpp_set_vind_32_atomic(SEXP xSEXP, SEXP indSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_vind_32_atomic(x, ind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_vind_64_atomic
void rcpp_set_vind_64_atomic(SEXP x, const SEXP ind, const SEXP rp);
RcppExport SEXP _mutatomic_rcpp_set_vind_64_atomic(SEXP xSEXP, SEXP indSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_vind_64_atomic(x, ind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Logical
void rcpp_setapply_col_Logical(LogicalMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_col_Logical(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Logical(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Logical
void rcpp_setapply_row_Logical(LogicalMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_row_Logical(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Logical(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Integer
void rcpp_setapply_col_Integer(IntegerMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_col_Integer(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Integer(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Integer
void rcpp_setapply_row_Integer(IntegerMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_row_Integer(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Integer(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Numeric
void rcpp_setapply_col_Numeric(NumericMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_col_Numeric(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Numeric(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Numeric
void rcpp_setapply_row_Numeric(NumericMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_row_Numeric(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Numeric(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Character
void rcpp_setapply_col_Character(CharacterMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_col_Character(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Character(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Character
void rcpp_setapply_row_Character(CharacterMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_row_Character(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Character(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Complex
void rcpp_setapply_col_Complex(ComplexMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_col_Complex(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Complex(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Complex
void rcpp_setapply_row_Complex(ComplexMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_row_Complex(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Complex(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Raw
void rcpp_setapply_col_Raw(RawMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_col_Raw(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Raw(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Raw
void rcpp_setapply_row_Raw(RawMatrix x, Function f);
RcppExport SEXP _mutatomic_rcpp_setapply_row_Raw(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Raw(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_address
String rcpp_address(SEXP x);
RcppExport SEXP _mutatomic_rcpp_address(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_address(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_list_bindings
CharacterVector rcpp_list_bindings(String ref_address, Environment env, CharacterVector ls);
RcppExport SEXP _mutatomic_rcpp_list_bindings(SEXP ref_addressSEXP, SEXP envSEXP, SEXP lsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type ref_address(ref_addressSEXP);
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ls(lsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_list_bindings(ref_address, env, ls));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_serial
SEXP rcpp_serial(SEXP x);
RcppExport SEXP _mutatomic_rcpp_serial(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_serial(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_is_ma
bool rcpp_is_ma(RObject x);
RcppExport SEXP _mutatomic_rcpp_is_ma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_is_ma(x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP C_any_address(SEXP, SEXP);
RcppExport SEXP C_any_badindx(SEXP, SEXP);
RcppExport SEXP C_is_altrep(SEXP);
RcppExport SEXP C_serial(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_mutatomic_rcpp_set_all_atomic", (DL_FUNC) &_mutatomic_rcpp_set_all_atomic, 2},
    {"_mutatomic_rcpp_set_vind_32_atomic", (DL_FUNC) &_mutatomic_rcpp_set_vind_32_atomic, 3},
    {"_mutatomic_rcpp_set_vind_64_atomic", (DL_FUNC) &_mutatomic_rcpp_set_vind_64_atomic, 3},
    {"_mutatomic_rcpp_setapply_col_Logical", (DL_FUNC) &_mutatomic_rcpp_setapply_col_Logical, 2},
    {"_mutatomic_rcpp_setapply_row_Logical", (DL_FUNC) &_mutatomic_rcpp_setapply_row_Logical, 2},
    {"_mutatomic_rcpp_setapply_col_Integer", (DL_FUNC) &_mutatomic_rcpp_setapply_col_Integer, 2},
    {"_mutatomic_rcpp_setapply_row_Integer", (DL_FUNC) &_mutatomic_rcpp_setapply_row_Integer, 2},
    {"_mutatomic_rcpp_setapply_col_Numeric", (DL_FUNC) &_mutatomic_rcpp_setapply_col_Numeric, 2},
    {"_mutatomic_rcpp_setapply_row_Numeric", (DL_FUNC) &_mutatomic_rcpp_setapply_row_Numeric, 2},
    {"_mutatomic_rcpp_setapply_col_Character", (DL_FUNC) &_mutatomic_rcpp_setapply_col_Character, 2},
    {"_mutatomic_rcpp_setapply_row_Character", (DL_FUNC) &_mutatomic_rcpp_setapply_row_Character, 2},
    {"_mutatomic_rcpp_setapply_col_Complex", (DL_FUNC) &_mutatomic_rcpp_setapply_col_Complex, 2},
    {"_mutatomic_rcpp_setapply_row_Complex", (DL_FUNC) &_mutatomic_rcpp_setapply_row_Complex, 2},
    {"_mutatomic_rcpp_setapply_col_Raw", (DL_FUNC) &_mutatomic_rcpp_setapply_col_Raw, 2},
    {"_mutatomic_rcpp_setapply_row_Raw", (DL_FUNC) &_mutatomic_rcpp_setapply_row_Raw, 2},
    {"_mutatomic_rcpp_address", (DL_FUNC) &_mutatomic_rcpp_address, 1},
    {"_mutatomic_rcpp_list_bindings", (DL_FUNC) &_mutatomic_rcpp_list_bindings, 3},
    {"_mutatomic_rcpp_serial", (DL_FUNC) &_mutatomic_rcpp_serial, 1},
    {"_mutatomic_rcpp_is_ma", (DL_FUNC) &_mutatomic_rcpp_is_ma, 1},
    {"C_any_address", (DL_FUNC) &C_any_address, 2},
    {"C_any_badindx", (DL_FUNC) &C_any_badindx, 2},
    {"C_is_altrep",   (DL_FUNC) &C_is_altrep,   1},
    {"C_serial",      (DL_FUNC) &C_serial,      1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mutatomic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
